// <auto-generated />
using System;
using APIDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace APIDataAccess.Migrations
{
    [DbContext(typeof(CarTenderDataContext))]
    [Migration("20220927143005_initial_1")]
    partial class initial_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("APIModels.Entities.AddressInformation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NeighborhoodID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("NeighborhoodID");

                    b.ToTable("AddressInformation");
                });

            modelBuilder.Entity("APIModels.Entities.Advert", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("PrePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("CarID")
                        .IsUnique();

                    b.HasIndex("CreatedBy");

                    b.ToTable("Advert");
                });

            modelBuilder.Entity("APIModels.Entities.AdvertStatusHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AdvertID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatuID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("AdvertID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StatuID");

                    b.ToTable("AdvertStatusHistory");
                });

            modelBuilder.Entity("APIModels.Entities.Authorization", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AutherizationPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("Authorazition");
                });

            modelBuilder.Entity("APIModels.Entities.BidCar", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BidID")
                        .HasColumnType("int");

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MinimumPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("StartPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("BidID");

                    b.HasIndex("CarID")
                        .IsUnique();

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("BidCar");
                });

            modelBuilder.Entity("APIModels.Entities.BidCorporateUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BidID")
                        .HasColumnType("int");

                    b.Property<int?>("CorporateID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("BidID");

                    b.HasIndex("CorporateID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("UserID");

                    b.ToTable("BidCorporateUser");
                });

            modelBuilder.Entity("APIModels.Entities.BidInformation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<string>("BidName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FinishedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FinishedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorporate")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FinishedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("UserID");

                    b.ToTable("BidInformation");
                });

            modelBuilder.Entity("APIModels.Entities.BidOfferDetail", b =>
                {
                    b.Property<int>("BidCarID")
                        .HasColumnType("int");

                    b.Property<int>("BidUserOfferID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("BidCarID", "BidUserOfferID");

                    b.HasIndex("BidUserOfferID");

                    b.ToTable("BidOfferDetail");
                });

            modelBuilder.Entity("APIModels.Entities.BidStatusHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BidID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatuID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("BidID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StatuID");

                    b.ToTable("BidStatusHistory");
                });

            modelBuilder.Entity("APIModels.Entities.BidUserOffer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BidCorporateUserID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("BidCorporateUserID");

                    b.ToTable("BidUserOffer");
                });

            modelBuilder.Entity("APIModels.Entities.Car", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("APIModels.Entities.CarBuyerInformation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("CarID");

                    b.HasIndex("UserID");

                    b.ToTable("CarBuyerInformation");
                });

            modelBuilder.Entity("APIModels.Entities.CarDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CarDetailName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("CarDetail");
                });

            modelBuilder.Entity("APIModels.Entities.CarDetailValue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CarDetailID")
                        .HasColumnType("int");

                    b.Property<string>("CarDetailValueName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("CarDetailID");

                    b.ToTable("CarDetailValue");
                });

            modelBuilder.Entity("APIModels.Entities.CarImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("CarID");

                    b.ToTable("CarImage");
                });

            modelBuilder.Entity("APIModels.Entities.CarModification", b =>
                {
                    b.Property<int>("ModificationID")
                        .HasColumnType("int");

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ModificationID", "CarID");

                    b.HasIndex("CarID");

                    b.ToTable("CarModification");
                });

            modelBuilder.Entity("APIModels.Entities.CarStatusHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("CarStatuID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("CarID");

                    b.HasIndex("CarStatuID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("CarStatusHistory");
                });

            modelBuilder.Entity("APIModels.Entities.CarValue", b =>
                {
                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("CarValueID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("CarID", "CarValueID");

                    b.HasIndex("CarValueID");

                    b.ToTable("CarValue");
                });

            modelBuilder.Entity("APIModels.Entities.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("City");
                });

            modelBuilder.Entity("APIModels.Entities.Corporate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AddressInformationID")
                        .HasColumnType("int");

                    b.Property<string>("CorporateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorporatePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("AddressInformationID");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Corporate");
                });

            modelBuilder.Entity("APIModels.Entities.CorporateRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("CorporateRole");
                });

            modelBuilder.Entity("APIModels.Entities.CorporateStatusHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CorporateID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatuID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("CorporateID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StatuID");

                    b.ToTable("CorporateStatusHistory");
                });

            modelBuilder.Entity("APIModels.Entities.CorporateUser", b =>
                {
                    b.Property<int>("CorporateID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("CorporateRoleID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("CorporateID", "UserID");

                    b.HasIndex("CorporateRoleID");

                    b.HasIndex("UserID");

                    b.ToTable("CorporateUser");
                });

            modelBuilder.Entity("APIModels.Entities.District", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TownID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("TownID");

                    b.ToTable("District");
                });

            modelBuilder.Entity("APIModels.Entities.Expertise", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AddressInformationID")
                        .HasColumnType("int");

                    b.Property<string>("ExpertiseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("AddressInformationID");

                    b.ToTable("Expertise");
                });

            modelBuilder.Entity("APIModels.Entities.Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MessageContentID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("MessageContentID");

                    b.HasIndex("UserID");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("APIModels.Entities.MessageContent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ContentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("MessageContent");
                });

            modelBuilder.Entity("APIModels.Entities.Modification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModificationComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("Modification");
                });

            modelBuilder.Entity("APIModels.Entities.Neighborhood", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NeighborhoodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("DistrictID");

                    b.ToTable("Neighborhood");
                });

            modelBuilder.Entity("APIModels.Entities.Package", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BidCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PackageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("Package");
                });

            modelBuilder.Entity("APIModels.Entities.PackageCorporate", b =>
                {
                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.Property<int>("CorporateID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PackageID", "CorporateID");

                    b.HasIndex("CorporateID")
                        .IsUnique();

                    b.ToTable("PackageCorporate");
                });

            modelBuilder.Entity("APIModels.Entities.PageAuthorization", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PageAuthorizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("PageAuthorization");
                });

            modelBuilder.Entity("APIModels.Entities.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("APIModels.Entities.RoleAuthorization", b =>
                {
                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("AuthorizationID")
                        .HasColumnType("int");

                    b.Property<int>("PageAuthorizationID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("RoleID", "AuthorizationID", "PageAuthorizationID");

                    b.HasIndex("AuthorizationID");

                    b.HasIndex("PageAuthorizationID");

                    b.ToTable("RoleAutherization");
                });

            modelBuilder.Entity("APIModels.Entities.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("APIModels.Entities.Town", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TownName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Town");
                });

            modelBuilder.Entity("APIModels.Entities.TramerComponent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TramerComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.ToTable("TramerComponent");
                });

            modelBuilder.Entity("APIModels.Entities.TramerInformation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TramerPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("CarID")
                        .IsUnique();

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("TramerInformation");
                });

            modelBuilder.Entity("APIModels.Entities.TramerInformationComponent", b =>
                {
                    b.Property<int>("TramerInformationID")
                        .HasColumnType("int");

                    b.Property<int>("TramerComponentID")
                        .HasColumnType("int");

                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("TramerInformationID", "TramerComponentID");

                    b.HasIndex("TramerComponentID");

                    b.ToTable("TramerInformationComponent");
                });

            modelBuilder.Entity("APIModels.Entities.TramerStatusHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatuID")
                        .HasColumnType("int");

                    b.Property<int>("TramerInformationComponentID")
                        .HasColumnType("int");

                    b.Property<int?>("TramerInformationComponentTramerComponentID")
                        .HasColumnType("int");

                    b.Property<int?>("TramerInformationComponentTramerInformationID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StatuID");

                    b.HasIndex("TramerInformationComponentTramerInformationID", "TramerInformationComponentTramerComponentID");

                    b.ToTable("TramerStatusHistory");
                });

            modelBuilder.Entity("APIModels.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstAndLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorporate")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ID");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("RoleID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("APIModels.Entities.UserCar", b =>
                {
                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("CarID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserCar");
                });

            modelBuilder.Entity("APIModels.Entities.UserFavoriteCar", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("UserID", "CarID");

                    b.HasIndex("CarID");

                    b.ToTable("UserFavoriteCar");
                });

            modelBuilder.Entity("APIModels.Entities.AddressInformation", b =>
                {
                    b.HasOne("APIModels.Entities.Neighborhood", "Neighborhood")
                        .WithMany()
                        .HasForeignKey("NeighborhoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Neighborhood");
                });

            modelBuilder.Entity("APIModels.Entities.Advert", b =>
                {
                    b.HasOne("APIModels.Entities.Car", "Car")
                        .WithOne("Offer")
                        .HasForeignKey("APIModels.Entities.Advert", "CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "Adder")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Adder");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("APIModels.Entities.AdvertStatusHistory", b =>
                {
                    b.HasOne("APIModels.Entities.Advert", "Advert")
                        .WithMany()
                        .HasForeignKey("AdvertID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "Adder")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("APIModels.Entities.Status", "Status")
                        .WithMany("OfferStatusHistories")
                        .HasForeignKey("StatuID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Adder");

                    b.Navigation("Advert");

                    b.Navigation("Modifier");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("APIModels.Entities.BidCar", b =>
                {
                    b.HasOne("APIModels.Entities.BidInformation", "BidInformation")
                        .WithMany("BidCars")
                        .HasForeignKey("BidID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.Car", "Car")
                        .WithOne("BidCar")
                        .HasForeignKey("APIModels.Entities.BidCar", "CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "Adder")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Adder");

                    b.Navigation("BidInformation");

                    b.Navigation("Car");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("APIModels.Entities.BidCorporateUser", b =>
                {
                    b.HasOne("APIModels.Entities.BidInformation", "BidInformation")
                        .WithMany("BidCorporateUser")
                        .HasForeignKey("BidID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.Corporate", "Corporate")
                        .WithMany("BidCorporateUsers")
                        .HasForeignKey("CorporateID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("APIModels.Entities.User", "Adder")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("APIModels.Entities.User", "User")
                        .WithMany("BidCorporateUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Adder");

                    b.Navigation("BidInformation");

                    b.Navigation("Corporate");

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APIModels.Entities.BidInformation", b =>
                {
                    b.HasOne("APIModels.Entities.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("APIModels.Entities.User", "Adder")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "Finisher")
                        .WithMany()
                        .HasForeignKey("FinishedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("APIModels.Entities.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("APIModels.Entities.User", null)
                        .WithMany("BidInformations")
                        .HasForeignKey("UserID");

                    b.Navigation("Adder");

                    b.Navigation("Approver");

                    b.Navigation("Finisher");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("APIModels.Entities.BidOfferDetail", b =>
                {
                    b.HasOne("APIModels.Entities.BidCar", "BidCar")
                        .WithMany()
                        .HasForeignKey("BidCarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.BidUserOffer", "BidUserOffer")
                        .WithMany()
                        .HasForeignKey("BidUserOfferID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BidCar");

                    b.Navigation("BidUserOffer");
                });

            modelBuilder.Entity("APIModels.Entities.BidStatusHistory", b =>
                {
                    b.HasOne("APIModels.Entities.BidInformation", "Bid")
                        .WithMany("BidStatusHistory")
                        .HasForeignKey("BidID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "Adder")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("APIModels.Entities.Status", "Status")
                        .WithMany("BidStatusHistories")
                        .HasForeignKey("StatuID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Adder");

                    b.Navigation("Bid");

                    b.Navigation("Modifier");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("APIModels.Entities.BidUserOffer", b =>
                {
                    b.HasOne("APIModels.Entities.BidCorporateUser", "BidCorporateUser")
                        .WithMany("BidUserOffers")
                        .HasForeignKey("BidCorporateUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BidCorporateUser");
                });

            modelBuilder.Entity("APIModels.Entities.Car", b =>
                {
                    b.HasOne("APIModels.Entities.User", "Adder")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("Adder");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("APIModels.Entities.CarBuyerInformation", b =>
                {
                    b.HasOne("APIModels.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APIModels.Entities.CarDetailValue", b =>
                {
                    b.HasOne("APIModels.Entities.CarDetail", "CarDetail")
                        .WithMany("DetailValues")
                        .HasForeignKey("CarDetailID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarDetail");
                });

            modelBuilder.Entity("APIModels.Entities.CarImage", b =>
                {
                    b.HasOne("APIModels.Entities.Car", "Car")
                        .WithMany("CarImages")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("APIModels.Entities.CarModification", b =>
                {
                    b.HasOne("APIModels.Entities.Car", "Car")
                        .WithMany("CarModifications")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.Modification", "Modification")
                        .WithMany("CarModifications")
                        .HasForeignKey("ModificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Modification");
                });

            modelBuilder.Entity("APIModels.Entities.CarStatusHistory", b =>
                {
                    b.HasOne("APIModels.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.Status", "CarStatus")
                        .WithMany("CarStatusHistories")
                        .HasForeignKey("CarStatuID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "Adder")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Adder");

                    b.Navigation("Car");

                    b.Navigation("CarStatus");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("APIModels.Entities.CarValue", b =>
                {
                    b.HasOne("APIModels.Entities.Car", "Car")
                        .WithMany("CarValues")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.CarDetailValue", "CarDetailValue")
                        .WithMany("CarValue")
                        .HasForeignKey("CarValueID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("CarDetailValue");
                });

            modelBuilder.Entity("APIModels.Entities.Corporate", b =>
                {
                    b.HasOne("APIModels.Entities.AddressInformation", "AddressInformation")
                        .WithMany("Corporates")
                        .HasForeignKey("AddressInformationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "Adder")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adder");

                    b.Navigation("AddressInformation");
                });

            modelBuilder.Entity("APIModels.Entities.CorporateStatusHistory", b =>
                {
                    b.HasOne("APIModels.Entities.Corporate", "Corporate")
                        .WithMany()
                        .HasForeignKey("CorporateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "Adder")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("APIModels.Entities.Status", "Status")
                        .WithMany("CorporateStatusHistories")
                        .HasForeignKey("StatuID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Adder");

                    b.Navigation("Corporate");

                    b.Navigation("Modifier");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("APIModels.Entities.CorporateUser", b =>
                {
                    b.HasOne("APIModels.Entities.Corporate", "Corporate")
                        .WithMany("CorporateUsers")
                        .HasForeignKey("CorporateID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.CorporateRole", "CorporateRole")
                        .WithMany("CorporateUsers")
                        .HasForeignKey("CorporateRoleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "User")
                        .WithMany("CorporateUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Corporate");

                    b.Navigation("CorporateRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APIModels.Entities.District", b =>
                {
                    b.HasOne("APIModels.Entities.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });

            modelBuilder.Entity("APIModels.Entities.Expertise", b =>
                {
                    b.HasOne("APIModels.Entities.AddressInformation", "AddressInformation")
                        .WithMany("Expertises")
                        .HasForeignKey("AddressInformationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressInformation");
                });

            modelBuilder.Entity("APIModels.Entities.Message", b =>
                {
                    b.HasOne("APIModels.Entities.MessageContent", "MessageContent")
                        .WithMany()
                        .HasForeignKey("MessageContentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageContent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APIModels.Entities.Neighborhood", b =>
                {
                    b.HasOne("APIModels.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("APIModels.Entities.PackageCorporate", b =>
                {
                    b.HasOne("APIModels.Entities.Corporate", "Corporate")
                        .WithOne("PackageCorporate")
                        .HasForeignKey("APIModels.Entities.PackageCorporate", "CorporateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.Package", "Package")
                        .WithMany("PackageCorporate")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporate");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("APIModels.Entities.RoleAuthorization", b =>
                {
                    b.HasOne("APIModels.Entities.Authorization", "Authorization")
                        .WithMany("RoleAutherizations")
                        .HasForeignKey("AuthorizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.PageAuthorization", "PageAuthorization")
                        .WithMany("RoleAutherizations")
                        .HasForeignKey("PageAuthorizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.Role", "Role")
                        .WithMany("RoleAutherizations")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Authorization");

                    b.Navigation("PageAuthorization");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("APIModels.Entities.Town", b =>
                {
                    b.HasOne("APIModels.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("APIModels.Entities.TramerComponent", b =>
                {
                    b.HasOne("APIModels.Entities.User", "Adder")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adder");
                });

            modelBuilder.Entity("APIModels.Entities.TramerInformation", b =>
                {
                    b.HasOne("APIModels.Entities.Car", "Car")
                        .WithOne("TramerInformation")
                        .HasForeignKey("APIModels.Entities.TramerInformation", "CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "Adder")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Adder");

                    b.Navigation("Car");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("APIModels.Entities.TramerInformationComponent", b =>
                {
                    b.HasOne("APIModels.Entities.TramerComponent", "TramerComponent")
                        .WithMany("TramerComponentStatus")
                        .HasForeignKey("TramerComponentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.TramerInformation", "TramerInformation")
                        .WithMany("TramerComponentStatus")
                        .HasForeignKey("TramerInformationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TramerComponent");

                    b.Navigation("TramerInformation");
                });

            modelBuilder.Entity("APIModels.Entities.TramerStatusHistory", b =>
                {
                    b.HasOne("APIModels.Entities.User", "Adder")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("APIModels.Entities.Status", "Status")
                        .WithMany("TramerStatusHistories")
                        .HasForeignKey("StatuID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.TramerInformationComponent", "TramerInformationComponent")
                        .WithMany()
                        .HasForeignKey("TramerInformationComponentTramerInformationID", "TramerInformationComponentTramerComponentID");

                    b.Navigation("Adder");

                    b.Navigation("Modifier");

                    b.Navigation("Status");

                    b.Navigation("TramerInformationComponent");
                });

            modelBuilder.Entity("APIModels.Entities.User", b =>
                {
                    b.HasOne("APIModels.Entities.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApprovedBy");

                    b.HasOne("APIModels.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("APIModels.Entities.UserCar", b =>
                {
                    b.HasOne("APIModels.Entities.Car", "Car")
                        .WithMany("UserCars")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "User")
                        .WithMany("UserCars")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APIModels.Entities.UserFavoriteCar", b =>
                {
                    b.HasOne("APIModels.Entities.Car", "Car")
                        .WithMany("UserFavoriteCars")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIModels.Entities.User", "User")
                        .WithMany("UserFavoriteCars")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APIModels.Entities.AddressInformation", b =>
                {
                    b.Navigation("Corporates");

                    b.Navigation("Expertises");
                });

            modelBuilder.Entity("APIModels.Entities.Authorization", b =>
                {
                    b.Navigation("RoleAutherizations");
                });

            modelBuilder.Entity("APIModels.Entities.BidCorporateUser", b =>
                {
                    b.Navigation("BidUserOffers");
                });

            modelBuilder.Entity("APIModels.Entities.BidInformation", b =>
                {
                    b.Navigation("BidCars");

                    b.Navigation("BidCorporateUser");

                    b.Navigation("BidStatusHistory");
                });

            modelBuilder.Entity("APIModels.Entities.Car", b =>
                {
                    b.Navigation("BidCar");

                    b.Navigation("CarImages");

                    b.Navigation("CarModifications");

                    b.Navigation("CarValues");

                    b.Navigation("Offer");

                    b.Navigation("TramerInformation");

                    b.Navigation("UserCars");

                    b.Navigation("UserFavoriteCars");
                });

            modelBuilder.Entity("APIModels.Entities.CarDetail", b =>
                {
                    b.Navigation("DetailValues");
                });

            modelBuilder.Entity("APIModels.Entities.CarDetailValue", b =>
                {
                    b.Navigation("CarValue");
                });

            modelBuilder.Entity("APIModels.Entities.Corporate", b =>
                {
                    b.Navigation("BidCorporateUsers");

                    b.Navigation("CorporateUsers");

                    b.Navigation("PackageCorporate");
                });

            modelBuilder.Entity("APIModels.Entities.CorporateRole", b =>
                {
                    b.Navigation("CorporateUsers");
                });

            modelBuilder.Entity("APIModels.Entities.Modification", b =>
                {
                    b.Navigation("CarModifications");
                });

            modelBuilder.Entity("APIModels.Entities.Package", b =>
                {
                    b.Navigation("PackageCorporate");
                });

            modelBuilder.Entity("APIModels.Entities.PageAuthorization", b =>
                {
                    b.Navigation("RoleAutherizations");
                });

            modelBuilder.Entity("APIModels.Entities.Role", b =>
                {
                    b.Navigation("RoleAutherizations");
                });

            modelBuilder.Entity("APIModels.Entities.Status", b =>
                {
                    b.Navigation("BidStatusHistories");

                    b.Navigation("CarStatusHistories");

                    b.Navigation("CorporateStatusHistories");

                    b.Navigation("OfferStatusHistories");

                    b.Navigation("TramerStatusHistories");
                });

            modelBuilder.Entity("APIModels.Entities.TramerComponent", b =>
                {
                    b.Navigation("TramerComponentStatus");
                });

            modelBuilder.Entity("APIModels.Entities.TramerInformation", b =>
                {
                    b.Navigation("TramerComponentStatus");
                });

            modelBuilder.Entity("APIModels.Entities.User", b =>
                {
                    b.Navigation("BidCorporateUsers");

                    b.Navigation("BidInformations");

                    b.Navigation("CorporateUsers");

                    b.Navigation("Messages");

                    b.Navigation("UserCars");

                    b.Navigation("UserFavoriteCars");
                });
#pragma warning restore 612, 618
        }
    }
}
